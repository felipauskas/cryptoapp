{"ast":null,"code":"var _jsxFileName = \"/Users/felipedeleon/Desktop/CryptoApp/src/Components/CryptoChart/index.js\";\nimport React, { Component } from 'react';\nimport axios from \"axios\";\nimport { Line, Bar } from \"react-chartjs-2\";\nimport { Chart, Filler } from \"chart.js\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend } from \"chart.js\";\nimport { ChartDiv } from './styles';\nimport { lineChartOptions, barChartOptions } from './utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend);\nChart.register(Filler);\nexport default class CryptoChart extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      isLoading: false,\n      hasError: false,\n      hasData: false,\n      totalVolumes: [],\n      dateLabels: [],\n      dailyPrice: []\n    };\n\n    this.getData = async () => {\n      this.setState({\n        isLoading: true,\n        hasError: false,\n        hasData: false\n      });\n\n      try {\n        const {\n          data\n        } = await axios(`https://api.coingecko.com/api/v3/coins/bitcoin/market_chart?vs_currency=usd&days=30&interval=daily`);\n        const dateLabels = data.prices.map(element => {\n          const date = new Date(element[0]).toLocaleString(\"en-gb\", {\n            day: \"numeric\",\n            month: \"2-digit\"\n          });\n          return date;\n        });\n        const dailyPrice = data.prices.map(element => element[1].toFixed(2));\n        const totalVolumes = data.total_volumes.map(element => element[1].toFixed(2));\n        this.setState({\n          isLoading: false,\n          dateLabels: dateLabels,\n          dailyPrice: dailyPrice,\n          hasData: true,\n          totalVolumes: totalVolumes\n        });\n      } catch (error) {\n        console.log(error);\n        this.setState({\n          isLoading: false,\n          hasData: false,\n          hasError: true\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  componentDidUpdate() {\n    console.log(this.state);\n  }\n\n  render() {\n    const {\n      hasData,\n      dailyPrice,\n      dateLabels\n    } = this.state;\n    const chartData = {\n      labels: dateLabels.slice(0, -1),\n      datasets: [{\n        data: dailyPrice.slice(0, -1),\n        fill: true,\n        borderColor: \"rgba(0, 255, 95, 0.56)\",\n        backgroundColor: \"rgba(0, 255, 95, 0.3)\",\n        tension: 0.1\n      }]\n    };\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: hasData && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(ChartDiv, {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"BTC\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: dailyPrice.slice(-1)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            data: chartData,\n            options: lineChartOptions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(ChartDiv, {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Volume 24h\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: dailyPrice.slice(-1)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            data: chartData,\n            options: lineChartOptions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true)\n    }, void 0, false);\n  }\n\n}","map":{"version":3,"sources":["/Users/felipedeleon/Desktop/CryptoApp/src/Components/CryptoChart/index.js"],"names":["React","Component","axios","Line","Bar","Chart","Filler","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","BarElement","Title","Tooltip","Legend","ChartDiv","lineChartOptions","barChartOptions","register","CryptoChart","state","isLoading","hasError","hasData","totalVolumes","dateLabels","dailyPrice","getData","setState","data","prices","map","element","date","Date","toLocaleString","day","month","toFixed","total_volumes","error","console","log","componentDidMount","componentDidUpdate","render","chartData","labels","slice","datasets","fill","borderColor","backgroundColor","tension"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from \"axios\";\nimport { Line, Bar } from \"react-chartjs-2\";\nimport { Chart, Filler } from \"chart.js\";\nimport {Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend} from \"chart.js\";\nimport { ChartDiv } from './styles';\nimport { lineChartOptions, barChartOptions } from './utils'\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nChart.register(Filler);\n\nexport default class CryptoChart extends Component {\n    state = {\n        isLoading: false,\n        hasError: false,\n        hasData: false,\n        totalVolumes: [],\n        dateLabels: [],\n        dailyPrice: [],\n    }\n\n    getData = async () => {\n        this.setState({isLoading: true, hasError: false, hasData: false});\n        try {\n            const { data } = await axios(`https://api.coingecko.com/api/v3/coins/bitcoin/market_chart?vs_currency=usd&days=30&interval=daily`);\n            const dateLabels = data.prices.map((element) => {\n                const date = new Date(element[0]).toLocaleString(\"en-gb\", {\n                    day: \"numeric\",\n                    month: \"2-digit\"\n                });\n                return date;\n            });\n            const dailyPrice = data.prices.map((element) => element[1].toFixed(2));\n            const totalVolumes = data.total_volumes.map((element) => element[1].toFixed(2));\n            this.setState({isLoading: false, dateLabels: dateLabels, dailyPrice: dailyPrice, hasData: true, totalVolumes: totalVolumes});\n        }\n        catch (error) {\n            console.log(error);\n            this.setState({isLoading: false, hasData: false, hasError: true});\n        }\n    }\n\n    componentDidMount() {\n        this.getData();\n    }\n\n    componentDidUpdate() {\n        console.log(this.state);\n    }\n\n\n    render() {\n        const { hasData, dailyPrice, dateLabels} = this.state;\n        const chartData = {\n            labels: dateLabels.slice(0, -1),\n            datasets: [\n                {\n                    data: dailyPrice.slice(0, -1),\n                    fill: true,\n                    borderColor: \"rgba(0, 255, 95, 0.56)\",\n                    backgroundColor: \"rgba(0, 255, 95, 0.3)\",\n                    tension: 0.1\n                }\n            ]\n        };\n\n        return (\n        <>\n            {hasData && (\n                <>\n                <ChartDiv>\n                    <span>BTC</span>\n                    <span>{dailyPrice.slice(-1)}</span>\n                    <span>Date</span>\n                    <Line data={chartData} options={lineChartOptions}/>\n                </ChartDiv>\n                <ChartDiv>\n                    <span>Volume 24h</span>\n                    <span>{dailyPrice.slice(-1)}</span>\n                    <span>Date</span>\n                    <Line data={chartData} options={lineChartOptions}/>\n                </ChartDiv>\n                </>\n            )}\n        </>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}