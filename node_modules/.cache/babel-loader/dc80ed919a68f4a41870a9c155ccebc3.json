{"ast":null,"code":"var _jsxFileName = \"/Users/felipedeleon/Desktop/CryptoApp/src/Components/CryptoChart/index.js\";\nimport React, { Component } from 'react';\nimport axios from \"axios\";\nimport { Line } from \"react-chartjs-2\";\nimport { Chart, Filler } from \"chart.js\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend } from \"chart.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend);\nChart.register(Filler);\nexport const chartOptions = {\n  responsive: true,\n  elements: {\n    point: {\n      radius: 0\n    }\n  },\n  plugins: {\n    legend: {\n      display: false\n    },\n    title: {\n      display: false\n    }\n  },\n  scales: {\n    y: {\n      display: false\n    },\n    x: {\n      title: {\n        display: false\n      },\n      offset: true,\n      grid: {\n        display: false\n      }\n    }\n  }\n};\nexport default class CryptoChart extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      isLoading: false,\n      hasError: false,\n      hasData: false,\n      dateLabels: [],\n      dailyPrice: []\n    };\n\n    this.getData = async () => {\n      this.setState({\n        isLoading: true,\n        hasError: false,\n        hasData: false\n      });\n\n      try {\n        const {\n          data\n        } = await axios(`https://api.coingecko.com/api/v3/coins/bitcoin/market_chart?vs_currency=usd&days=30&interval=daily`);\n        let dateLabels = data.prices.map(element => {\n          const date = new Date(element[0]).toLocaleString(\"en-gb\", {\n            day: \"numeric\",\n            month: \"2-digit\"\n          });\n          return date;\n        });\n        let dailyPrice = data.prices.map(element => element[1].toFixed(2));\n        dateLabels = dateLabels.slice(0, -1);\n        dailyPrice = dailyPrice.slice(0, -1);\n        this.setState({\n          isLoading: false,\n          dateLabels: dateLabels,\n          dailyPrice: dailyPrice,\n          hasData: true\n        });\n      } catch (error) {\n        console.log(error);\n        this.setState({\n          isLoading: false,\n          hasData: false,\n          hasError: true\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  componentDidUpdate() {\n    console.log(this.state);\n  }\n\n  render() {\n    const {\n      hasData,\n      dailyPrice,\n      dateLabels\n    } = this.state;\n    const chartData = {\n      dateLabels,\n      datasets: [{\n        data: dailyPrice,\n        fill: true,\n        borderColor: \"rgba(0, 255, 95, 0.56)\",\n        backgroundColor: \"rgba(0, 255, 95, 0.3)\",\n        tension: 0.1\n      }]\n    };\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), hasData && /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData,\n        options: this.chartOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n}\nconsole.log(this.chartOptions);","map":{"version":3,"sources":["/Users/felipedeleon/Desktop/CryptoApp/src/Components/CryptoChart/index.js"],"names":["React","Component","axios","Line","Chart","Filler","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","BarElement","Title","Tooltip","Legend","register","chartOptions","responsive","elements","point","radius","plugins","legend","display","title","scales","y","x","offset","grid","CryptoChart","state","isLoading","hasError","hasData","dateLabels","dailyPrice","getData","setState","data","prices","map","element","date","Date","toLocaleString","day","month","toFixed","slice","error","console","log","componentDidMount","componentDidUpdate","render","chartData","datasets","fill","borderColor","backgroundColor","tension"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport axios from \"axios\";\nimport { Line } from \"react-chartjs-2\";\nimport { Chart, Filler } from \"chart.js\";\nimport {Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend} from \"chart.js\";\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nChart.register(Filler);\n\nexport const chartOptions = {\n    responsive: true,\n    elements: {\n      point: {\n        radius: 0\n      }\n    },\n    plugins: {\n      legend: {\n        display: false\n      },\n      title: {\n        display: false\n      }\n    },\n    scales: {\n      y: {\n        display: false\n      },\n      x: {\n        title: {\n          display: false\n        },\n        offset: true,\n        grid: {\n          display: false\n        }\n      }\n    }\n};\n\nexport default class CryptoChart extends Component {\n    state = {\n        isLoading: false,\n        hasError: false,\n        hasData: false,\n        dateLabels: [],\n        dailyPrice: [],\n    }\n\n    getData = async () => {\n        this.setState({isLoading: true, hasError: false, hasData: false});\n        try {\n            const { data } = await axios(`https://api.coingecko.com/api/v3/coins/bitcoin/market_chart?vs_currency=usd&days=30&interval=daily`);\n            let dateLabels = data.prices.map((element) => {\n                const date = new Date(element[0]).toLocaleString(\"en-gb\", {\n                    day: \"numeric\",\n                    month: \"2-digit\"\n                });\n                return date;\n            });\n            let dailyPrice = data.prices.map((element) => element[1].toFixed(2));\n            dateLabels = dateLabels.slice(0, -1);\n            dailyPrice = dailyPrice.slice(0, -1);\n            this.setState({isLoading: false, dateLabels: dateLabels, dailyPrice: dailyPrice, hasData: true});\n        }\n        catch (error) {\n            console.log(error);\n            this.setState({isLoading: false, hasData: false, hasError: true});\n        }\n    }\n\n    componentDidMount() {\n        this.getData();\n    }\n\n    componentDidUpdate() {\n        console.log(this.state);\n    }\n\n\n    render() {\n        const { hasData, dailyPrice, dateLabels} = this.state;\n        const chartData = {\n            dateLabels,\n            datasets: [\n                {\n                    data: dailyPrice,\n                    fill: true,\n                    borderColor: \"rgba(0, 255, 95, 0.56)\",\n                    backgroundColor: \"rgba(0, 255, 95, 0.3)\",\n                    tension: 0.1\n                }\n            ]\n        };\n\n        return (\n        <>\n        <span>Test</span>\n            {hasData && (\n                <Line data={chartData} options={this.chartOptions} />\n            )}\n        </>\n        );\n    }\n}\nconsole.log(this.chartOptions);\n"]},"metadata":{},"sourceType":"module"}