{"ast":null,"code":"var _jsxFileName = \"/Users/felipedeleon/Desktop/CryptoApp/src/components/CryptoChart/index.js\";\nimport React, { Component } from 'react';\nimport axios from \"axios\";\nimport { Line, Bar } from \"react-chartjs-2\";\nimport { Chart, CategoryScale, Filler, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend } from \"chart.js\";\nimport { CurrentDate, ChartDiv, DataLabel, DataValue } from './styles';\nimport { lineChartOptions, barChartOptions, convertToMoney } from './utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChart.register(CategoryScale, LinearScale, PointElement, LineElement, BarElement, Filler, Title, Tooltip, Legend);\nexport default class CryptoChart extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      isLoading: false,\n      hasError: false,\n      hasData: false,\n      totalVolumes: [],\n      dateLabels: [],\n      dailyPrice: []\n    };\n\n    this.getData = async () => {\n      this.setState({\n        isLoading: true,\n        hasError: false,\n        hasData: false\n      });\n\n      try {\n        const {\n          data\n        } = await axios(`https://api.coingecko.com/api/v3/coins/bitcoin/market_chart?vs_currency=usd&days=30&interval=daily`);\n        const dateLabels = data.prices.map(element => {\n          const date = new Date(element[0]).toLocaleString(\"en-gb\", {\n            day: \"numeric\",\n            month: \"2-digit\"\n          });\n          return date;\n        });\n        const dailyPrice = data.prices.map(element => element[1].toFixed(2));\n        const totalVolumes = data.total_volumes.map(element => element[1].toFixed(0));\n        this.setState({\n          isLoading: false,\n          dateLabels: dateLabels,\n          dailyPrice: dailyPrice,\n          hasData: true,\n          totalVolumes: totalVolumes\n        });\n      } catch (error) {\n        console.log(error);\n        this.setState({\n          isLoading: false,\n          hasData: false,\n          hasError: true\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  render() {\n    const {\n      hasData,\n      dailyPrice,\n      dateLabels,\n      totalVolumes\n    } = this.state;\n    const todayPrice = convertToMoney.format(dailyPrice.slice(-1));\n    const todayVolume = convertToMoney.format(totalVolumes.slice(-1));\n    const [weekday, month, day, year] = new Date().toString().split(\" \");\n    const lineChartData = {\n      labels: dateLabels.slice(0, -2),\n      datasets: [{\n        data: dailyPrice.slice(0, -2),\n        fill: true,\n        borderColor: \"rgba(0, 255, 95, 0.56)\",\n        backgroundColor: \"rgba(0, 255, 95, 0.3)\",\n        tension: 0.1\n      }]\n    };\n    const barChartData = {\n      labels: dateLabels.slice(0, -2),\n      datasets: [{\n        data: totalVolumes.slice(0, -2),\n        backgroundColor: \"rgba(33, 114, 229, 1)\"\n      }]\n    };\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: hasData && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(ChartDiv, {\n          children: [/*#__PURE__*/_jsxDEV(DataLabel, {\n            children: \"BTC\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(DataValue, {\n            children: [\"$\", todayPrice]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(CurrentDate, {\n            children: [month, \" \", day, \", \", year]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            data: lineChartData,\n            options: lineChartOptions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ChartDiv, {\n          children: [/*#__PURE__*/_jsxDEV(DataLabel, {\n            children: \"Volume 24\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(DataValue, {\n            children: [\"$\", todayVolume]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(CurrentDate, {\n            children: [month, \" \", day, \", \", year]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Bar, {\n            data: barChartData,\n            options: barChartOptions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true)\n    }, void 0, false);\n  }\n\n}","map":{"version":3,"sources":["/Users/felipedeleon/Desktop/CryptoApp/src/components/CryptoChart/index.js"],"names":["React","Component","axios","Line","Bar","Chart","CategoryScale","Filler","LinearScale","PointElement","LineElement","BarElement","Title","Tooltip","Legend","CurrentDate","ChartDiv","DataLabel","DataValue","lineChartOptions","barChartOptions","convertToMoney","register","CryptoChart","state","isLoading","hasError","hasData","totalVolumes","dateLabels","dailyPrice","getData","setState","data","prices","map","element","date","Date","toLocaleString","day","month","toFixed","total_volumes","error","console","log","componentDidMount","render","todayPrice","format","slice","todayVolume","weekday","year","toString","split","lineChartData","labels","datasets","fill","borderColor","backgroundColor","tension","barChartData"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,iBAA1B;AACA,SAAQC,KAAR,EAAeC,aAAf,EAA8BC,MAA9B,EAAsCC,WAAtC,EAAmDC,YAAnD,EAAiEC,WAAjE,EAA8EC,UAA9E,EAA0FC,KAA1F,EAAiGC,OAAjG,EAA0GC,MAA1G,QAAuH,UAAvH;AACA,SAASC,WAAT,EAAsBC,QAAtB,EAAgCC,SAAhC,EAA2CC,SAA3C,QAA4D,UAA5D;AACA,SAASC,gBAAT,EAA2BC,eAA3B,EAA4CC,cAA5C,QAAkE,SAAlE;;;AAEAhB,KAAK,CAACiB,QAAN,CACEhB,aADF,EAEEE,WAFF,EAGEC,YAHF,EAIEC,WAJF,EAKEC,UALF,EAMEJ,MANF,EAOEK,KAPF,EAQEC,OARF,EASEC,MATF;AAYA,eAAe,MAAMS,WAAN,SAA0BtB,SAA1B,CAAoC;AAAA;AAAA;AAAA,SAC/CuB,KAD+C,GACvC;AACJC,MAAAA,SAAS,EAAE,KADP;AAEJC,MAAAA,QAAQ,EAAE,KAFN;AAGJC,MAAAA,OAAO,EAAE,KAHL;AAIJC,MAAAA,YAAY,EAAE,EAJV;AAKJC,MAAAA,UAAU,EAAE,EALR;AAMJC,MAAAA,UAAU,EAAE;AANR,KADuC;;AAAA,SAU/CC,OAV+C,GAUrC,YAAY;AAClB,WAAKC,QAAL,CAAc;AAACP,QAAAA,SAAS,EAAE,IAAZ;AAAkBC,QAAAA,QAAQ,EAAE,KAA5B;AAAmCC,QAAAA,OAAO,EAAE;AAA5C,OAAd;;AACA,UAAI;AACA,cAAM;AAAEM,UAAAA;AAAF,YAAW,MAAM/B,KAAK,CAAE,oGAAF,CAA5B;AACA,cAAM2B,UAAU,GAAGI,IAAI,CAACC,MAAL,CAAYC,GAAZ,CAAiBC,OAAD,IAAa;AAC5C,gBAAMC,IAAI,GAAG,IAAIC,IAAJ,CAASF,OAAO,CAAC,CAAD,CAAhB,EAAqBG,cAArB,CAAoC,OAApC,EAA6C;AACtDC,YAAAA,GAAG,EAAE,SADiD;AAEtDC,YAAAA,KAAK,EAAE;AAF+C,WAA7C,CAAb;AAIA,iBAAOJ,IAAP;AACH,SANkB,CAAnB;AAOA,cAAMP,UAAU,GAAGG,IAAI,CAACC,MAAL,CAAYC,GAAZ,CAAiBC,OAAD,IAAaA,OAAO,CAAC,CAAD,CAAP,CAAWM,OAAX,CAAmB,CAAnB,CAA7B,CAAnB;AACA,cAAMd,YAAY,GAAGK,IAAI,CAACU,aAAL,CAAmBR,GAAnB,CAAwBC,OAAD,IAAaA,OAAO,CAAC,CAAD,CAAP,CAAWM,OAAX,CAAmB,CAAnB,CAApC,CAArB;AACA,aAAKV,QAAL,CAAc;AAACP,UAAAA,SAAS,EAAE,KAAZ;AAAmBI,UAAAA,UAAU,EAAEA,UAA/B;AAA2CC,UAAAA,UAAU,EAAEA,UAAvD;AAAmEH,UAAAA,OAAO,EAAE,IAA5E;AAAkFC,UAAAA,YAAY,EAAEA;AAAhG,SAAd;AACH,OAZD,CAaA,OAAOgB,KAAP,EAAc;AACVC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,aAAKZ,QAAL,CAAc;AAACP,UAAAA,SAAS,EAAE,KAAZ;AAAmBE,UAAAA,OAAO,EAAE,KAA5B;AAAmCD,UAAAA,QAAQ,EAAE;AAA7C,SAAd;AACH;AACJ,KA7B8C;AAAA;;AA+B/CqB,EAAAA,iBAAiB,GAAG;AAChB,SAAKhB,OAAL;AACH;;AAGDiB,EAAAA,MAAM,GAAG;AACL,UAAM;AAAErB,MAAAA,OAAF;AAAWG,MAAAA,UAAX;AAAuBD,MAAAA,UAAvB;AAAmCD,MAAAA;AAAnC,QAAmD,KAAKJ,KAA9D;AACA,UAAMyB,UAAU,GAAG5B,cAAc,CAAC6B,MAAf,CAAsBpB,UAAU,CAACqB,KAAX,CAAiB,CAAC,CAAlB,CAAtB,CAAnB;AACA,UAAMC,WAAW,GAAG/B,cAAc,CAAC6B,MAAf,CAAsBtB,YAAY,CAACuB,KAAb,CAAmB,CAAC,CAApB,CAAtB,CAApB;AACA,UAAM,CAACE,OAAD,EAAUZ,KAAV,EAAiBD,GAAjB,EAAsBc,IAAtB,IAA8B,IAAIhB,IAAJ,GAAWiB,QAAX,GAAsBC,KAAtB,CAA4B,GAA5B,CAApC;AAEA,UAAMC,aAAa,GAAG;AAClBC,MAAAA,MAAM,EAAE7B,UAAU,CAACsB,KAAX,CAAiB,CAAjB,EAAoB,CAAC,CAArB,CADU;AAElBQ,MAAAA,QAAQ,EAAE,CACN;AACI1B,QAAAA,IAAI,EAAEH,UAAU,CAACqB,KAAX,CAAiB,CAAjB,EAAoB,CAAC,CAArB,CADV;AAEIS,QAAAA,IAAI,EAAE,IAFV;AAGIC,QAAAA,WAAW,EAAE,wBAHjB;AAIIC,QAAAA,eAAe,EAAE,uBAJrB;AAKIC,QAAAA,OAAO,EAAE;AALb,OADM;AAFQ,KAAtB;AAaA,UAAMC,YAAY,GAAG;AACjBN,MAAAA,MAAM,EAAE7B,UAAU,CAACsB,KAAX,CAAiB,CAAjB,EAAoB,CAAC,CAArB,CADS;AAEjBQ,MAAAA,QAAQ,EAAE,CACN;AACI1B,QAAAA,IAAI,EAAEL,YAAY,CAACuB,KAAb,CAAmB,CAAnB,EAAsB,CAAC,CAAvB,CADV;AAEIW,QAAAA,eAAe,EAAE;AAFrB,OADM;AAFO,KAArB;AAUA,wBACA;AAAA,gBACKnC,OAAO,iBACJ;AAAA,gCACI,QAAC,QAAD;AAAA,kCACI,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,QAAC,SAAD;AAAA,4BAAasB,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAGI,QAAC,WAAD;AAAA,uBAAcR,KAAd,OAAsBD,GAAtB,QAA6Bc,IAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHJ,eAII,QAAC,IAAD;AAAM,YAAA,IAAI,EAAEG,aAAZ;AAA2B,YAAA,OAAO,EAAEtC;AAApC;AAAA;AAAA;AAAA;AAAA,kBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAOI,QAAC,QAAD;AAAA,kCACI,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,QAAC,SAAD;AAAA,4BAAaiC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAGI,QAAC,WAAD;AAAA,uBAAcX,KAAd,OAAsBD,GAAtB,QAA6Bc,IAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHJ,eAII,QAAC,GAAD;AAAK,YAAA,IAAI,EAAEU,YAAX;AAAyB,YAAA,OAAO,EAAE5C;AAAlC;AAAA;AAAA;AAAA;AAAA,kBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPJ;AAAA;AAFR,qBADA;AAoBH;;AArF8C","sourcesContent":["import React, { Component } from 'react';\nimport axios from \"axios\";\nimport { Line, Bar } from \"react-chartjs-2\";\nimport {Chart, CategoryScale, Filler, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend} from \"chart.js\";\nimport { CurrentDate, ChartDiv, DataLabel, DataValue } from './styles';\nimport { lineChartOptions, barChartOptions, convertToMoney } from './utils'\n\nChart.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Filler,\n  Title,\n  Tooltip,\n  Legend\n);\n\nexport default class CryptoChart extends Component {\n    state = {\n        isLoading: false,\n        hasError: false,\n        hasData: false,\n        totalVolumes: [],\n        dateLabels: [],\n        dailyPrice: [],\n    }\n\n    getData = async () => {\n        this.setState({isLoading: true, hasError: false, hasData: false});\n        try {\n            const { data } = await axios(`https://api.coingecko.com/api/v3/coins/bitcoin/market_chart?vs_currency=usd&days=30&interval=daily`);\n            const dateLabels = data.prices.map((element) => {\n                const date = new Date(element[0]).toLocaleString(\"en-gb\", {\n                    day: \"numeric\",\n                    month: \"2-digit\"\n                });\n                return date;\n            });\n            const dailyPrice = data.prices.map((element) => element[1].toFixed(2));\n            const totalVolumes = data.total_volumes.map((element) => element[1].toFixed(0));\n            this.setState({isLoading: false, dateLabels: dateLabels, dailyPrice: dailyPrice, hasData: true, totalVolumes: totalVolumes});\n        }\n        catch (error) {\n            console.log(error);\n            this.setState({isLoading: false, hasData: false, hasError: true});\n        }\n    }\n\n    componentDidMount() {\n        this.getData();\n    }\n\n\n    render() {\n        const { hasData, dailyPrice, dateLabels, totalVolumes} = this.state;\n        const todayPrice = convertToMoney.format(dailyPrice.slice(-1));\n        const todayVolume = convertToMoney.format(totalVolumes.slice(-1));\n        const [weekday, month, day, year] = new Date().toString().split(\" \");\n        \n        const lineChartData = {\n            labels: dateLabels.slice(0, -2),\n            datasets: [\n                {\n                    data: dailyPrice.slice(0, -2),\n                    fill: true,\n                    borderColor: \"rgba(0, 255, 95, 0.56)\",\n                    backgroundColor: \"rgba(0, 255, 95, 0.3)\",\n                    tension: 0.1\n                }\n            ]\n        };\n\n        const barChartData = {\n            labels: dateLabels.slice(0, -2),\n            datasets: [\n                {\n                    data: totalVolumes.slice(0, -2),\n                    backgroundColor: \"rgba(33, 114, 229, 1)\",\n                }\n            ]\n        };\n\n        return (\n        <>\n            {hasData && (\n                <>\n                    <ChartDiv>\n                        <DataLabel>BTC</DataLabel>\n                        <DataValue>${todayPrice}</DataValue>\n                        <CurrentDate>{month} {day}, {year}</CurrentDate>\n                        <Line data={lineChartData} options={lineChartOptions}/>\n                    </ChartDiv>\n                    <ChartDiv>\n                        <DataLabel>Volume 24</DataLabel>\n                        <DataValue>${todayVolume}</DataValue>\n                        <CurrentDate>{month} {day}, {year}</CurrentDate>\n                        <Bar data={barChartData} options={barChartOptions}/>\n                    </ChartDiv>\n                </>\n            )}\n        </>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}